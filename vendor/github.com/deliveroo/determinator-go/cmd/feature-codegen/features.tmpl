// Code generated by `feature-codegen` DO NOT EDIT.
package {{.PackageName}}

import (
	"fmt"
	"github.com/deliveroo/determinator-go"
	"go.uber.org/zap"
)

// To add or remove flags, modify {{.Src}} and regenerate this file.
const (
{{ range .Features }}
  {{with .ConstantDescription}}{{.}}{{end}}
	{{.ConstantName}} = "{{.Name}}"
{{ end }}
)

// apmLogger follows the apm.Logging interface
type apmLogger interface {
	Error(string, ...zap.Field)
}

type features struct {
	determinator determinator.Retriever
	logger apmLogger
}

func (f *features) logError(format string, a ...any) {
	if f.logger == nil {
		return
	}
	f.logger.Error(fmt.Sprintf(format, a...))
}

type Option func(*features)

type Features interface {
{{ range .Features }}
  {{.IsEnabledMethod.Description}}
  {{.IsEnabledMethod.Name}}() bool

  {{.IsEnabledForActorMethod.Description}}
  {{.IsEnabledForActorMethod.Name}}(actor determinator.Actor) bool

  {{.VariantForActorMethod.Description}}
  {{.VariantForActorMethod.Name}}(actor determinator.Actor) string
{{end }}
}

func NewFeatures(determinator determinator.Retriever, opts... Option) Features {
	features := &features{
		determinator: determinator,
	}

	for _, opt := range opts {
		opt(features)
	}

	return features
}

func WithLogger(logger apmLogger) Option {
	return func(f *features) {
		f.logger = logger
	}
}

{{range .Features}}
{{.IsEnabledMethod.Description}}
func (f *features) {{.IsEnabledMethod.Name}}() bool {
  feature, err := f.determinator.Retrieve({{.ConstantName}})
	if err != nil {
		f.logError("Could not retrieve the feature flag `{{.Name}}` due to error: %s", err.Error())
		return false
	}

	if feature == nil {
		return false
	}
	on, err := feature.IsFeatureFlagOn(determinator.Actor{})
	if err != nil {
		f.logError("Could not determine whether the feature flag `{{.Name}}` was on, due to error: %s", err.Error())
		return false
	}
	return on
}

{{.IsEnabledForActorMethod.Description}}
func (f *features) {{.IsEnabledForActorMethod.Name}}(actor determinator.Actor) bool {
  feature, err := f.determinator.Retrieve({{.ConstantName}})
	if err != nil {
		f.logError("Could not retrieve the feature flag `{{.Name}}` due to error: %s", err.Error())
		return false
	}

	if feature == nil {
		return false
	}
	on, err := feature.IsFeatureFlagOn(actor)
	if err != nil {
		f.logError("Could not determine whether the feature flag `{{.Name}}` was on, for the given Actor, due to error: %s", err.Error())
		return false
	}
	return on
}

{{.VariantForActorMethod.Description}}
func (f *features) {{.VariantForActorMethod.Name}}(actor determinator.Actor) string {
  feature, err := f.determinator.Retrieve({{.ConstantName}})
	if err != nil {
		f.logError("Could not retrieve the feature flag `{{.Name}}` due to error: %s", err.Error())
		return ""
	}

	if feature == nil {
		return ""
	}
	variant, err := feature.WhichVariant(actor)
	if err != nil {
		f.logError("Could not determine variant of feature flag `{{.Name}}` for the given Actor, due to error: %s", err.Error())
		return ""
	}
	return variant
}
{{ end }}
