// Code generated by mockery v2.14.0. DO NOT EDIT.

package apm

import (
	sentry "github.com/getsentry/sentry-go"
	mock "github.com/stretchr/testify/mock"

	time "time"

	zap "go.uber.org/zap"

	zapcore "go.uber.org/zap/zapcore"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Alert provides a mock function with given fields: err, user, fields
func (_m *MockService) Alert(err error, user *sentry.User, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err, user)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AppName provides a mock function with given fields:
func (_m *MockService) AppName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockService) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields: timeout
func (_m *MockService) Flush(timeout time.Duration) {
	_m.Called(timeout)
}

// Logger provides a mock function with given fields:
func (_m *MockService) Logger() *zap.Logger {
	ret := _m.Called()

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// NewSpan provides a mock function with given fields: name, resource, spanType, options
func (_m *MockService) NewSpan(name string, resource string, spanType SpanType, options ...SpanOption) *Span {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, resource, spanType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *Span
	if rf, ok := ret.Get(0).(func(string, string, SpanType, ...SpanOption) *Span); ok {
		r0 = rf(name, resource, spanType, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Span)
		}
	}

	return r0
}

// StatsD provides a mock function with given fields:
func (_m *MockService) StatsD() Metrics {
	ret := _m.Called()

	var r0 Metrics
	if rf, ok := ret.Get(0).(func() Metrics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Metrics)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
