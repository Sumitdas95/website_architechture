// Code generated by mockery v2.14.0. DO NOT EDIT.

package apm

import (
	context "context"
	http "net/http"

	ddtrace "gopkg.in/DataDog/dd-trace-go.v1/ddtrace"

	lambda "github.com/aws/aws-lambda-go/lambda"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockLambdaService is an autogenerated mock type for the LambdaService type
type MockLambdaService struct {
	mock.Mock
}

// Metric provides a mock function with given fields: metric, value, tags
func (_m *MockLambdaService) Metric(metric string, value float64, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, metric, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MetricWithTimestamp provides a mock function with given fields: metric, value, timestamp, tags
func (_m *MockLambdaService) MetricWithTimestamp(metric string, value float64, timestamp time.Time, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, metric, value, timestamp)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// StartSpan provides a mock function with given fields: operationName
func (_m *MockLambdaService) StartSpan(operationName string) ddtrace.Span {
	ret := _m.Called(operationName)

	var r0 ddtrace.Span
	if rf, ok := ret.Get(0).(func(string) ddtrace.Span); ok {
		r0 = rf(operationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddtrace.Span)
		}
	}

	return r0
}

// StartSpanFromContext provides a mock function with given fields: ctx, operationName
func (_m *MockLambdaService) StartSpanFromContext(ctx context.Context, operationName string) (ddtrace.Span, context.Context) {
	ret := _m.Called(ctx, operationName)

	var r0 ddtrace.Span
	if rf, ok := ret.Get(0).(func(context.Context, string) ddtrace.Span); ok {
		r0 = rf(ctx, operationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddtrace.Span)
		}
	}

	var r1 context.Context
	if rf, ok := ret.Get(1).(func(context.Context, string) context.Context); ok {
		r1 = rf(ctx, operationName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	return r0, r1
}

// WrapClient provides a mock function with given fields: c
func (_m *MockLambdaService) WrapClient(c *http.Client) *http.Client {
	ret := _m.Called(c)

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func(*http.Client) *http.Client); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// WrapFunction provides a mock function with given fields: handler
func (_m *MockLambdaService) WrapFunction(handler interface{}) interface{} {
	ret := _m.Called(handler)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// WrapLambdaHandlerInterface provides a mock function with given fields: handler
func (_m *MockLambdaService) WrapLambdaHandlerInterface(handler lambda.Handler) lambda.Handler {
	ret := _m.Called(handler)

	var r0 lambda.Handler
	if rf, ok := ret.Get(0).(func(lambda.Handler) lambda.Handler); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lambda.Handler)
		}
	}

	return r0
}

// WrapRoundTripper provides a mock function with given fields: rt
func (_m *MockLambdaService) WrapRoundTripper(rt http.RoundTripper) http.RoundTripper {
	ret := _m.Called(rt)

	var r0 http.RoundTripper
	if rf, ok := ret.Get(0).(func(http.RoundTripper) http.RoundTripper); ok {
		r0 = rf(rt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.RoundTripper)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockLambdaService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLambdaService creates a new instance of MockLambdaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLambdaService(t mockConstructorTestingTNewMockLambdaService) *MockLambdaService {
	mock := &MockLambdaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
