// Code generated by `feature-codegen` DO NOT EDIT.
package features

import (
	"fmt"

	"github.com/deliveroo/determinator-go"
	"go.uber.org/zap"
)

// To add or remove flags, modify ../../.florence/features.yml and regenerate this file.
const (

	// FeatureFlagFeatureFlag This is an example feature flag used in the Go service template.
	//
	// tags: [go-service-template]
	FeatureFlagFeatureFlag = "example_feature_flag"
)

// apmLogger follows the apm.Logging interface
type apmLogger interface {
	Error(string, ...zap.Field)
}

type features struct {
	determinator determinator.Retriever
	logger       apmLogger
}

func (f *features) logError(format string, a ...any) {
	if f.logger == nil {
		return
	}
	f.logger.Error(fmt.Sprintf(format, a...))
}

type Option func(*features)

type Features interface {
	// FeatureFlagFlag determinates if the feature flag is on, regardless of the Actor.
	//  This is an example feature flag used in the Go service template.
	//
	// tags: [go-service-template]
	FeatureFlagFlag() bool

	// FeatureFlagFlagForActor determinates if the feature flag is on for a given Actor.
	// This is an example feature flag used in the Go service template.
	//
	// tags: [go-service-template]
	FeatureFlagFlagForActor(actor determinator.Actor) bool

	// FeatureFlagVariantForActor determinates the variant for a given Actor.
	// This is an example feature flag used in the Go service template.
	//
	// tags: [go-service-template]
	FeatureFlagVariantForActor(actor determinator.Actor) string
}

func NewFeatures(determinator determinator.Retriever, opts ...Option) Features {
	features := &features{
		determinator: determinator,
	}

	for _, opt := range opts {
		opt(features)
	}

	return features
}

func WithLogger(logger apmLogger) Option {
	return func(f *features) {
		f.logger = logger
	}
}

// FeatureFlagFlag determinates if the feature flag is on, regardless of the Actor.
//
//	This is an example feature flag used in the Go service template.
//
// tags: [go-service-template]
func (f *features) FeatureFlagFlag() bool {
	feature, err := f.determinator.Retrieve(FeatureFlagFeatureFlag)
	if err != nil {
		f.logError("Could not retrieve the feature flag `example_feature_flag` due to error: %s", err.Error())
		return false
	}

	if feature == nil {
		return false
	}
	on, err := feature.IsFeatureFlagOn(determinator.Actor{})
	if err != nil {
		f.logError("Could not determine whether the feature flag `example_feature_flag` was on, due to error: %s", err.Error())
		return false
	}
	return on
}

// FeatureFlagFlagForActor determinates if the feature flag is on for a given Actor.
// This is an example feature flag used in the Go service template.
//
// tags: [go-service-template]
func (f *features) FeatureFlagFlagForActor(actor determinator.Actor) bool {
	feature, err := f.determinator.Retrieve(FeatureFlagFeatureFlag)
	if err != nil {
		f.logError("Could not retrieve the feature flag `example_feature_flag` due to error: %s", err.Error())
		return false
	}

	if feature == nil {
		return false
	}
	on, err := feature.IsFeatureFlagOn(actor)
	if err != nil {
		f.logError("Could not determine whether the feature flag `example_feature_flag` was on, for the given Actor, due to error: %s", err.Error())
		return false
	}
	return on
}

// FeatureFlagVariantForActor determinates the variant for a given Actor.
// This is an example feature flag used in the Go service template.
//
// tags: [go-service-template]
func (f *features) FeatureFlagVariantForActor(actor determinator.Actor) string {
	feature, err := f.determinator.Retrieve(FeatureFlagFeatureFlag)
	if err != nil {
		f.logError("Could not retrieve the feature flag `example_feature_flag` due to error: %s", err.Error())
		return ""
	}

	if feature == nil {
		return ""
	}
	variant, err := feature.WhichVariant(actor)
	if err != nil {
		f.logError("Could not determine variant of feature flag `example_feature_flag` for the given Actor, due to error: %s", err.Error())
		return ""
	}
	return variant
}
