# GLOBAL-ANCHORS - DockerHub Authentication changes applied - PROD-1431 / PROD-1435
global_dockerhub_login: &global_dockerhub_login
  run:
    name: Authenticate with hub.docker.com - DockerHub
    command: docker login -u $GLOBAL_DOCKERHUB_USERNAME -p $GLOBAL_DOCKERHUB_PASSWORD
global_context: &global_context
  context:
    - org-global
global_remote_docker: &global_remote_docker
  docker_layer_caching: false # enable it only where you run `docker build`
  version: 20.10.14
global_dockerhub_auth: &global_dockerhub_auth
  auth:
    username: $GLOBAL_DOCKERHUB_USERNAME
    password: $GLOBAL_DOCKERHUB_PASSWORD
version: 2.1
x-defaults: &defaults
  resource_class: small # see CPU usage at https://app.circleci.com/insights/gh/deliveroo/hopper
  working_directory: /test-sonarqube
  docker:
    - image: deliveroo/circleci:latest
      <<: *global_dockerhub_auth

commands:
  setup-environment:
    description: "Setup requirements"
    steps:
      - run:
          name: "Setup environment"
          command: |
            apt-get update && apt-get install wget
            apt-get install -y openjdk-17-jre-headless

  install-engine:
    description: "Install Sonarqube scanner"
    steps:
      - run:
          name: "Install Sonarqube scanner"
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONARQUBE_SCANNER_VERSION}.zip
            unzip sonar-scanner-cli-${SONARQUBE_SCANNER_VERSION}.zip

lint_steps: &lint_steps
  steps:
    - setup_remote_docker:
        <<: *global_remote_docker
        docker_layer_caching: true
    - *global_dockerhub_login
    - checkout
    - run:
        name: Build composition
        command: ci build
    - run:
        name: Run linter
        command: ci run --rm app make lint

test_steps: &test_steps
  steps:
    - setup_remote_docker:
        <<: *global_remote_docker
        docker_layer_caching: true
    - *global_dockerhub_login
    - checkout
    - run:
        name: Build composition
        command: ci build
    - run:
        name: Run test suite
        command: ci run --rm app make test

build_steps: &build_steps
    steps:
      - setup_remote_docker:
          <<: *global_remote_docker
          docker_layer_caching: true
      - *global_dockerhub_login
      - checkout
      - run:
          name: Build CI Image
          command: |
            export DOCKER_BUILDKIT=1
            docker build --progress=plain --tag "${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" --build-arg RUBY_VERSION=$(cat .ruby-version | head -n1) .
      - run:
          name: Save CI Image
          command: |
            mkdir -p workspace
            docker save "${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" \
                   --output "workspace/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1}.tar"
      - persist_to_workspace:
          root: workspace
          paths:
            - "*.tar"

scan_steps: &scan_steps
  steps:
    - checkout
    - setup-environment
    - install-engine
    - run:
        name: "Code analysis"
        command: |
          eval ./sonar-scanner-${SONARQUBE_SCANNER_VERSION}/bin/sonar-scanner -X \
            -Dsonar.host.url=$SONARQUBE_SANDBOX_HOST_URL \
            -Dsonar.login=$SONARQUBE_SANDBOX_SERVER_LOGIN

push_steps: &push_steps
  steps:
    - attach_workspace:
        at: workspace
    - setup_docker
    - run:
        name: Load persisted CI image
        command: |
          docker load --input "workspace/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1}.tar"
    - run:
        name: Push image to ECR
        command: |
          `print_env ${TARGET}`
          push_image_to_ecr

push_dependencies: &push_dependencies
  requires:
    - lint
    - lint_generate
    - test
    - build

scan_dependencies: &scan_dependencies
  requires:
    - build

filter_sandbox: &filter_sandbox
  filters:
    branches:
      only:
        - sandbox

filter_master: &filter_master
  filters:
    branches:
      only:
        - master
jobs:
  lint:
    <<: *defaults
    <<: *lint_steps

  test:
    <<: *defaults
    <<: *test_steps

  scan:
    <<: *defaults
    <<: *scan_steps


  build:
    <<: *defaults
    <<: *build_steps

  push_sandbox:
    executor: roo-container
    environment:
      TARGET: sandbox
    <<: *push_steps

workflows:
  version: 2

  build_and_push:
    jobs:
      - lint:
          <<: *global_context

      - test:
          <<: *global_context

      - scan:
          <<: *global_context
          <<: *filter_master

      - build:
          <<: *global_context

      - push_sandbox:
          <<: *global_context
          <<: *push_dependencies
          <<: *filter_sandbox

  weekly_sonar_scan:
    jobs:
      - scan
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master